// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enhanced User model with payment relations
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole // 'STUDENT' or 'COMPANY'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  applications Application[]
  subscriptions StudentSubscription[] // For students to access internships
}

// Enhanced Company model with campaign payment system
model Company {
  id        String     @id @default(uuid())
  name      String
  website   String?
  logoUrl   String?
  description String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  hrUser      User[]         // HRs associated with this company
  internships Internship[]
  campaigns   Campaign[]     // Payment campaigns for hiring
}

// Campaign model - Companies pay per campaign
model Campaign {
  id            String        @id @default(uuid())
  title         String
  description   String?
  budget        Float         // Amount paid for this campaign
  status        CampaignStatus @default(ACTIVE)
  startDate     DateTime      @default(now())
  endDate       DateTime
  maxInternships Int          // Maximum internships they can post in this campaign
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  company       Company       @relation(fields: [companyId], references: [id])
  companyId     String

  internships   Internship[]  // Internships under this campaign
  payment       CampaignPayment?
}

// Campaign payment tracking
model CampaignPayment {
  id            String        @id @default(uuid())
  campaignId    String        @unique
  amount        Float
  paymentMethod String        // 'CARD', 'UPI', 'BANK_TRANSFER', etc.
  transactionId String?
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
  createdAt     DateTime      @default(now())

  campaign      Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

// Enhanced Internship model linked to campaigns
model Internship {
  id          String      @id @default(uuid())
  title       String
  description String
  location    String
  type        InternshipType // REMOTE / IN_OFFICE / HYBRID
  stipend     Int?
  duration    String // e.g. "3 months"
  skills      Skill[]
  tags        Tag[]
  postedAt    DateTime   @default(now())
  deadline    DateTime
  isActive    Boolean    @default(true)

  company     Company    @relation(fields: [companyId], references: [id])
  companyId   String

  campaign    Campaign   @relation(fields: [campaignId], references: [id])
  campaignId  String

  applications Application[]
}

model Application {
  id            String   @id @default(uuid())
  coverLetter   String?
  status        ApplicationStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  internship    Internship @relation(fields: [internshipId], references: [id])
  internshipId  String

  user          User      @relation(fields: [userId], references: [id])
  userId        String

  @@unique([internshipId, userId]) // Prevent duplicate applications
}

// Student subscription model - Students pay for unlimited access
model StudentSubscription {
  id         String              @id @default(uuid())
  userId     String
  planId     String
  status     SubscriptionStatus  @default(ACTIVE)
  startedAt  DateTime            @default(now())
  endsAt     DateTime
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan       StudentPlan         @relation(fields: [planId], references: [id])
  payment    SubscriptionPayment?

  @@unique([userId, planId]) // One active subscription per plan per user
}

// Student subscription payment tracking
model SubscriptionPayment {
  id              String        @id @default(uuid())
  subscriptionId  String        @unique
  amount          Float
  paymentMethod   String
  transactionId   String?
  status          PaymentStatus @default(PENDING)
  paidAt          DateTime?
  createdAt       DateTime      @default(now())

  subscription    StudentSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

// Plans for students
model StudentPlan {
  id           String         @id @default(uuid())
  name         String         @unique
  price        Float
  billingCycle PlanCycle      @default(MONTHLY)  
  features     String[]       // e.g., ["unlimited_applications", "priority_support", "resume_reviews"]
  maxApplicationsPerMonth Int? // null for unlimited
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  subscriptions StudentSubscription[]
}

// Pricing plans for companies (campaign templates)
model CompanyPlan {
  id                String    @id @default(uuid())
  name              String    @unique
  price             Float
  maxInternships    Int       // How many internships they can post
  campaignDuration  Int       // Duration in days
  features          String[]  // e.g., ["featured_listings", "analytics", "priority_support"]
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Skill {
  id        String    @id @default(uuid())
  name      String    @unique
  internships Internship[]
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  internships Internship[]
}

// Enums
enum UserRole {
  STUDENT
  COMPANY
}

enum InternshipType {
  REMOTE
  IN_OFFICE
  HYBRID
}

enum ApplicationStatus {
  PENDING
  SHORTLISTED
  ACCEPTED
  REJECTED
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
  EXPIRED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PlanCycle {
  MONTHLY
  YEARLY
  FREE
}